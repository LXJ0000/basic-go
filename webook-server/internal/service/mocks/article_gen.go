// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/article.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/article.go -package=svcmock -destination=./internal/service/mocks/article_gen.go
//

// Package svcmock is a generated GoMock package.
package svcmock

import (
	context "context"
	reflect "reflect"
	domain "webook-server/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleService is a mock of ArticleService interface.
type MockArticleService struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServiceMockRecorder
}

// MockArticleServiceMockRecorder is the mock recorder for MockArticleService.
type MockArticleServiceMockRecorder struct {
	mock *MockArticleService
}

// NewMockArticleService creates a new mock instance.
func NewMockArticleService(ctrl *gomock.Controller) *MockArticleService {
	mock := &MockArticleService{ctrl: ctrl}
	mock.recorder = &MockArticleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleService) EXPECT() *MockArticleServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockArticleService) CreateOrUpdate(ctx context.Context, article domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockArticleServiceMockRecorder) CreateOrUpdate(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockArticleService)(nil).CreateOrUpdate), ctx, article)
}
