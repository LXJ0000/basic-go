// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/jwt/types.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/jwt/types.go -package=pkgmock -destination=./pkg/jwt/mock/types_gen.go
//

// Package pkgmock is a generated GoMock package.
package pkgmock

import (
	reflect "reflect"
	jwt "webook-server/pkg/jwt"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTHandler is a mock of JWTHandler interface.
type MockJWTHandler struct {
	ctrl     *gomock.Controller
	recorder *MockJWTHandlerMockRecorder
}

// MockJWTHandlerMockRecorder is the mock recorder for MockJWTHandler.
type MockJWTHandlerMockRecorder struct {
	mock *MockJWTHandler
}

// NewMockJWTHandler creates a new mock instance.
func NewMockJWTHandler(ctrl *gomock.Controller) *MockJWTHandler {
	mock := &MockJWTHandler{ctrl: ctrl}
	mock.recorder = &MockJWTHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTHandler) EXPECT() *MockJWTHandlerMockRecorder {
	return m.recorder
}

// CheckSsid mocks base method.
func (m *MockJWTHandler) CheckSsid(ctx *gin.Context, ssid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSsid", ctx, ssid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSsid indicates an expected call of CheckSsid.
func (mr *MockJWTHandlerMockRecorder) CheckSsid(ctx, ssid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSsid", reflect.TypeOf((*MockJWTHandler)(nil).CheckSsid), ctx, ssid)
}

// DealLoginToken mocks base method.
func (m *MockJWTHandler) DealLoginToken(ctx *gin.Context, userId int64, userName string) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealLoginToken", ctx, userId, userName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// DealLoginToken indicates an expected call of DealLoginToken.
func (mr *MockJWTHandlerMockRecorder) DealLoginToken(ctx, userId, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealLoginToken", reflect.TypeOf((*MockJWTHandler)(nil).DealLoginToken), ctx, userId, userName)
}

// GenAccessToken mocks base method.
func (m *MockJWTHandler) GenAccessToken(ctx *gin.Context, userID int64, username, ssid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenAccessToken", ctx, userID, username, ssid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenAccessToken indicates an expected call of GenAccessToken.
func (mr *MockJWTHandlerMockRecorder) GenAccessToken(ctx, userID, username, ssid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenAccessToken", reflect.TypeOf((*MockJWTHandler)(nil).GenAccessToken), ctx, userID, username, ssid)
}

// GenRefreshToken mocks base method.
func (m *MockJWTHandler) GenRefreshToken(ctx *gin.Context, userID int64, username, ssid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenRefreshToken", ctx, userID, username, ssid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenRefreshToken indicates an expected call of GenRefreshToken.
func (mr *MockJWTHandlerMockRecorder) GenRefreshToken(ctx, userID, username, ssid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenRefreshToken", reflect.TypeOf((*MockJWTHandler)(nil).GenRefreshToken), ctx, userID, username, ssid)
}

// InvalidateToken mocks base method.
func (m *MockJWTHandler) InvalidateToken(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateToken", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateToken indicates an expected call of InvalidateToken.
func (mr *MockJWTHandlerMockRecorder) InvalidateToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateToken", reflect.TypeOf((*MockJWTHandler)(nil).InvalidateToken), ctx)
}

// ParseAccessToken mocks base method.
func (m *MockJWTHandler) ParseAccessToken(ctx *gin.Context, tokenString string) (*jwt.MyClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccessToken", ctx, tokenString)
	ret0, _ := ret[0].(*jwt.MyClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccessToken indicates an expected call of ParseAccessToken.
func (mr *MockJWTHandlerMockRecorder) ParseAccessToken(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccessToken", reflect.TypeOf((*MockJWTHandler)(nil).ParseAccessToken), ctx, tokenString)
}

// ParseRefreshToken mocks base method.
func (m *MockJWTHandler) ParseRefreshToken(ctx *gin.Context, tokenString string) (*jwt.MyClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRefreshToken", ctx, tokenString)
	ret0, _ := ret[0].(*jwt.MyClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRefreshToken indicates an expected call of ParseRefreshToken.
func (mr *MockJWTHandlerMockRecorder) ParseRefreshToken(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRefreshToken", reflect.TypeOf((*MockJWTHandler)(nil).ParseRefreshToken), ctx, tokenString)
}
